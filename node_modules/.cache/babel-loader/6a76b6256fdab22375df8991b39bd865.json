{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  tickets: [],\n  isLoading: false,\n  error: \"\",\n  replyTicketError: \"\",\n  searchTicketList: [],\n  selectedTicket: {},\n  replyMsg: \"\"\n};\nconst ticketListSlice = createSlice({\n  name: \"ticketList\",\n  initialState,\n  reducers: {\n    fetchTicketLoading: state => {\n      state.isLoading = true;\n    },\n    fetchTicketSuccess: (state, action) => {\n      state.tickets = action.payload;\n      state.searchTicketList = action.payload;\n      state.isLoading = false;\n    },\n    fetchTicketFail: (state, {\n      payload\n    }) => {\n      state.isLoading = false;\n      state.error = payload;\n    },\n    searchTickets: (state, {\n      payload\n    }) => {\n      state.searchTicketList = state.tickets.filter(row => {\n        if (!payload) return row;\n        return row.subject.toLowerCase().includes(payload.toLowerCase());\n      });\n    },\n    fetchSingleTicketLoading: state => {\n      state.isLoading = true;\n    },\n    fetchSingleTicketSuccess: (state, {\n      payload\n    }) => {\n      state.selectedTicket = payload;\n      state.isLoading = false;\n      state.error = \"\";\n    },\n    fetchSingleTicketFail: (state, {\n      payload\n    }) => {\n      state.isLoading = false;\n      state.error = payload;\n    },\n    replyTicketLoading: state => {\n      state.isLoading = true;\n    },\n    replyTicketSuccess: (state, {\n      payload\n    }) => {\n      state.isLoading = false;\n      state.error = \"\";\n      state.replyMsg = payload;\n    },\n    replyTicketFail: (state, {\n      payload\n    }) => {\n      state.isLoading = false;\n      state.replyTicketError = payload;\n    },\n    closeTicketLoading: state => {\n      state.isLoading = true;\n    },\n    closeTicketSuccess: (state, {\n      payload\n    }) => {\n      state.isLoading = false;\n      state.error = \"\";\n      state.replyMsg = payload;\n    },\n    closeTicketFail: (state, {\n      payload\n    }) => {\n      state.isLoading = false;\n      state.error = payload;\n    }\n  }\n});\nconst {\n  reducer,\n  actions\n} = ticketListSlice;\nexport const {\n  fetchTicketLoading,\n  fetchTicketSuccess,\n  fetchTicketFail,\n  fetchSingleTicketLoading,\n  fetchSingleTicketSuccess,\n  fetchSingleTicketFail,\n  replyTicketLoading,\n  replyTicketSuccess,\n  replyTicketFail,\n  closeTicketLoading,\n  closeTicketSuccess,\n  closeTicketFail,\n  searchTickets\n} = actions;\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Man/Downloads/Compressed/crm-ticket/crm-frontend-8674e752f8218131abd459f664a565932ab1519e/src/pages/ticket-list/ticketsSlice.js"],"names":["createSlice","initialState","tickets","isLoading","error","replyTicketError","searchTicketList","selectedTicket","replyMsg","ticketListSlice","name","reducers","fetchTicketLoading","state","fetchTicketSuccess","action","payload","fetchTicketFail","searchTickets","filter","row","subject","toLowerCase","includes","fetchSingleTicketLoading","fetchSingleTicketSuccess","fetchSingleTicketFail","replyTicketLoading","replyTicketSuccess","replyTicketFail","closeTicketLoading","closeTicketSuccess","closeTicketFail","reducer","actions"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  tickets: [],\n  isLoading: false,\n  error: \"\",\n  replyTicketError: \"\",\n  searchTicketList: [],\n  selectedTicket: {},\n  replyMsg: \"\",\n};\n\nconst ticketListSlice = createSlice({\n  name: \"ticketList\",\n  initialState,\n  reducers: {\n    fetchTicketLoading: (state) => {\n      state.isLoading = true;\n    },\n    fetchTicketSuccess: (state, action) => {\n      state.tickets = action.payload;\n      state.searchTicketList = action.payload;\n      state.isLoading = false;\n    },\n    fetchTicketFail: (state, { payload }) => {\n      state.isLoading = false;\n      state.error = payload;\n    },\n    searchTickets: (state, { payload }) => {\n      state.searchTicketList = state.tickets.filter((row) => {\n        if (!payload) return row;\n\n        return row.subject.toLowerCase().includes(payload.toLowerCase());\n      });\n    },\n    fetchSingleTicketLoading: (state) => {\n      state.isLoading = true;\n    },\n    fetchSingleTicketSuccess: (state, { payload }) => {\n      state.selectedTicket = payload;\n      state.isLoading = false;\n      state.error = \"\";\n    },\n    fetchSingleTicketFail: (state, { payload }) => {\n      state.isLoading = false;\n      state.error = payload;\n    },\n    replyTicketLoading: (state) => {\n      state.isLoading = true;\n    },\n    replyTicketSuccess: (state, { payload }) => {\n      state.isLoading = false;\n      state.error = \"\";\n      state.replyMsg = payload;\n    },\n    replyTicketFail: (state, { payload }) => {\n      state.isLoading = false;\n      state.replyTicketError = payload;\n    },\n    closeTicketLoading: (state) => {\n      state.isLoading = true;\n    },\n    closeTicketSuccess: (state, { payload }) => {\n      state.isLoading = false;\n      state.error = \"\";\n      state.replyMsg = payload;\n    },\n    closeTicketFail: (state, { payload }) => {\n      state.isLoading = false;\n      state.error = payload;\n    },\n  },\n});\n\nconst { reducer, actions } = ticketListSlice;\n\nexport const {\n  fetchTicketLoading,\n  fetchTicketSuccess,\n  fetchTicketFail,\n  fetchSingleTicketLoading,\n  fetchSingleTicketSuccess,\n  fetchSingleTicketFail,\n  replyTicketLoading,\n  replyTicketSuccess,\n  replyTicketFail,\n  closeTicketLoading,\n  closeTicketSuccess,\n  closeTicketFail,\n  searchTickets,\n} = actions;\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}