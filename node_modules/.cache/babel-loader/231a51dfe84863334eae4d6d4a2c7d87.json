{"ast":null,"code":"import axios from \"axios\";\nconst rootUrl = \"http://localhost:3001/v1/\";\nconst loginUrl = rootUrl + \"user/login\";\nconst userProfileUrl = rootUrl + \"user\";\nconst logoutUrl = rootUrl + \"user/logout\";\nconst newAccessJWT = rootUrl + \"tokens\";\nconst userVerificationUrl = userProfileUrl + \"/verify\";\nexport const userRegistration = frmData => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await axios.post(userProfileUrl, frmData);\n      resolve(res.data);\n\n      if (res.data.status === \"success\") {\n        resolve(res.data);\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nexport const userRegistrationVerification = frmData => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await axios.patch(userVerificationUrl, frmData);\n      resolve(res.data);\n\n      if (res.data.status === \"success\") {\n        resolve(res.data);\n      }\n    } catch (error) {\n      reject({\n        status: \"error\",\n        message: error.error\n      });\n    }\n  });\n};\nexport const userLogin = frmData => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await axios.post(loginUrl, frmData);\n      resolve(res.data);\n\n      if (res.data.status === \"success\") {\n        sessionStorage.setItem(\"accessJWT\", res.data.accessJWT);\n        localStorage.setItem(\"crmSite\", JSON.stringify({\n          refreshJWT: res.data.refreshJWT\n        }));\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nexport const fetchUser = () => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const accessJWT = sessionStorage.getItem(\"accessJWT\");\n\n      if (!accessJWT) {\n        reject(\"Token not found!\");\n      }\n\n      const res = await axios.get(userProfileUrl, {\n        headers: {\n          Authorization: accessJWT\n        }\n      });\n      resolve(res.data);\n    } catch (error) {\n      console.log(error);\n      reject(error.message);\n    }\n  });\n};\nexport const fetchNewAccessJWT = () => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const {\n        refreshJWT\n      } = JSON.parse(localStorage.getItem(\"crmSite\"));\n\n      if (!refreshJWT) {\n        reject(\"Token not found!\");\n      }\n\n      const res = await axios.get(newAccessJWT, {\n        headers: {\n          Authorization: refreshJWT\n        }\n      });\n\n      if (res.data.status === \"success\") {\n        sessionStorage.setItem(\"accessJWT\", res.data.accessJWT);\n      }\n\n      resolve(true);\n    } catch (error) {\n      if (error.message === \"Request failed with status code 403\") {\n        localStorage.removeItem(\"crmSite\");\n      }\n\n      reject(false);\n    }\n  });\n};\nexport const userLogout = async () => {\n  try {\n    await axios.delete(logoutUrl, {\n      headers: {\n        Authorization: sessionStorage.getItem(\"accessJWT\")\n      }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["M:/tss-project/crm-frontend/src/api/userApi.js"],"names":["axios","rootUrl","loginUrl","userProfileUrl","logoutUrl","newAccessJWT","userVerificationUrl","userRegistration","frmData","Promise","resolve","reject","res","post","data","status","error","userRegistrationVerification","patch","message","userLogin","sessionStorage","setItem","accessJWT","localStorage","JSON","stringify","refreshJWT","fetchUser","getItem","get","headers","Authorization","console","log","fetchNewAccessJWT","parse","removeItem","userLogout","delete"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nconst rootUrl = \"http://localhost:3001/v1/\";\nconst loginUrl = rootUrl + \"user/login\";\nconst userProfileUrl = rootUrl + \"user\";\nconst logoutUrl = rootUrl + \"user/logout\";\nconst newAccessJWT = rootUrl + \"tokens\";\nconst userVerificationUrl = userProfileUrl + \"/verify\";\n\nexport const userRegistration = (frmData) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await axios.post(userProfileUrl, frmData);\n\n      resolve(res.data);\n\n      if (res.data.status === \"success\") {\n        resolve(res.data);\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nexport const userRegistrationVerification = (frmData) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await axios.patch(userVerificationUrl, frmData);\n\n      resolve(res.data);\n      if (res.data.status === \"success\") {\n        resolve(res.data);\n      }\n    } catch (error) {\n      reject({ status: \"error\", message: error.error });\n    }\n  });\n};\n\nexport const userLogin = (frmData) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await axios.post(loginUrl, frmData);\n\n      resolve(res.data);\n\n      if (res.data.status === \"success\") {\n        sessionStorage.setItem(\"accessJWT\", res.data.accessJWT);\n        localStorage.setItem(\n          \"crmSite\",\n          JSON.stringify({ refreshJWT: res.data.refreshJWT })\n        );\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nexport const fetchUser = () => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const accessJWT = sessionStorage.getItem(\"accessJWT\");\n\n      if (!accessJWT) {\n        reject(\"Token not found!\");\n      }\n\n      const res = await axios.get(userProfileUrl, {\n        headers: {\n          Authorization: accessJWT,\n        },\n      });\n\n      resolve(res.data);\n    } catch (error) {\n      console.log(error);\n      reject(error.message);\n    }\n  });\n};\n\nexport const fetchNewAccessJWT = () => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const { refreshJWT } = JSON.parse(localStorage.getItem(\"crmSite\"));\n\n      if (!refreshJWT) {\n        reject(\"Token not found!\");\n      }\n\n      const res = await axios.get(newAccessJWT, {\n        headers: {\n          Authorization: refreshJWT,\n        },\n      });\n\n      if (res.data.status === \"success\") {\n        sessionStorage.setItem(\"accessJWT\", res.data.accessJWT);\n      }\n\n      resolve(true);\n    } catch (error) {\n      if (error.message === \"Request failed with status code 403\") {\n        localStorage.removeItem(\"crmSite\");\n      }\n\n      reject(false);\n    }\n  });\n};\n\nexport const userLogout = async () => {\n  try {\n    await axios.delete(logoutUrl, {\n      headers: {\n        Authorization: sessionStorage.getItem(\"accessJWT\"),\n      },\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}